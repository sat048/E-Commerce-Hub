// import React,{useRef,useCallback,useEffect} from 'react'

// //防抖函数
// export default function Debounce(fn,delay,setInputValue ) {
//     const {current} = useRef({fn,timer:null});

//     useEffect(function(){
//         current.fn = fn;
//     },[fn]);

//     return useCallback ((...args)=>{
//         setInputValue(args[0].target.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }
//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);
//     })
// }


// export default Debounce

// import React,{useRef,useCallback,useEffect} from 'react'

// export default function Debounce(fn,delay,setInputValue) {
//     const {current} = useRef({fn,timer:null});
//     useEffect(function(){
//         current.fn = fn;
//     },[fn]);

//     return useCallback((...args)=>{
//         setInputValue(args[0].target.value)
//         if(current.timer){
//             clearTimerout(current.value)
//         }

//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);
//     })
// }

// export default Debounce


// import React,{useRef,useCallback,useEffect} from 'react'
// import useDebounce from '.';

// function Debounce(fn,delay,setInputvalue) {
//     const {current } = useRef({fn,timer:null});

//     useEffect(function(){
//         current.fn = fn;
//     },[fn]);

//     return useCallback((...args)=>{
//         setInputvalue(args[0].target.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }
//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);
//     })
// }

// export default useDebounce

// import React,{useRef,useCallback,useEffect} from 'react'
// function deDounce(fn,delay,setInputValue) {
//     const {current} = useRef({fn,timer:null});
//     useEffect(function(){
//         current.fn = fn;

//     },[fn]);
//     return useCallback((...args)=>{
//         setInputValue(args[0].terget.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }
//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);

//     })
// }

// export default deDounce

// import React,{useRef,useCallback,useEffect} from 'react'
   

// function debounce(fn,delay,setInputValue) {
//     const { current } = useRef({fn,timer:null});
//     useEffect(function(){
//         current.fn = fn;

//     },[fn]);
//     return  useCallback((...args)=>{
//         setInputValue(args[0].terget.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }
//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);

//     })
// }


// export default debounce

// import React,{useRef,useCallback,useEffect} from 'react'

// function debounce(fn,delay,setInputValue) {
//     const {current} = useRef({fn,timer:null});

//     useEffect(function(){
//         current.fn = fn;
//     },[fn]);

//     return useCallback((...args)=>{
//         setInputValue(args[0].target.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }

//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);
//     })
// }

// export default debounce

// import React,{useRef,useCallback,useEffect} from 'react'

// function debounce(fn,delay,setInputValue) {
//     const {current} = useRef({fn,timer:null});
//     return useCallback((...args)=>{
//         setInputValue(args[0].target.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }

//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay)
//     })
// }

// export default debounce;

// import React,{useRef,useCallback,useEffect} from 'react'

// function debounce(fn,delay,ssetInputValue) {
//     const {current} = useRef({fn,timer:null});
    
//     useEffect(function(){
//         current.fn = fn
//     },[fn])

//     return useCallback((...args)=>{
//         setInputValue(args[0].target.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }
//         current.timer = setTimeout(()=>{
//              current.fn(...args);
//         },delay)
//     })
// }

// export default debounce;


// import React,{useRef,useCallback,useEffect} from 'react'

// function debounce(fn,delay,setInputValue){
//     const {current} = useRef({fn,timer:null});
//     useEffect(function(){
//         current.fn = fn;
//     },[fn]);
//     return useCallback((...args)=>{
//         setInputValue(args[0].target.value)
//         if(current.timer){
            
//         }

//     })
// }

// import React,{useRef,useCallback,useEffect, useReducer} from 'react'

// function useDebounce(fn,delay,setInputvalue) {
//     const {current} = useRef({fn,timer:null});
//     useEffect(function(){
//         current.fn = fn;
//     },[fn]);
//     return useCallback ((...args)=>{
//         setInputvalue(args[0].target.value)
//         if(current.timer){
//             clearTimeout(current.timer);
//         }
//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);
//     })
// }


// import React,{useRef,useCallback,useEffect} from 'react'

//  function useDebounce(fn,delay,setInputvalue) {
//      const current = useReducer({fn,timer:null});

//      useEffect(function(){
//          current.fn = fn;

//      },[fn]);
//     return useCallback((...args)=>{
//         setInputvalue(args[0].target.value);
//         if(current.timer){
//             clearTimeout(current.timer);
//         }

//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay);
//     })
// }
// import React,{useRef,useEffect,useCallback} from 'react'

// function useDebounce(fn,delay,setInputvalue){
//     const current = useRef({fn,timer:null});
//     useEffect(function(){
//         current.fn = fn;
//     },[fn]);
//     return useCallback((...args)=>{
//         setInputvalue(args[0].terget.value);
//         if(current.timer){//判断timer
//             clearTimeout(current.timer)
//         }

//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay)
//     })
// }

// import React,{useRef,useCallback,useEffect} from 'react'

// function useDebounce(fn,delay,setInputvalue){
//     const {current} = useRef({fn,timer:null});

//     useEffect(function (){
//      current.fn = fn;   
//     },[fn]);

//     return useCallback(()=>{
//         setInputvalue(args[0].target.value);
//         if(current.timer){
//             clearTimeout(current.timer);
//         }
//         current.timer = setTimeout(()=>{
//             current.fn(...args);
//         },delay)
//     })
// }

// export default useDebounce


// import React,{useRef,useCallback,useEffect} from 'react'

// function useDebounce(fn,delay,setInputvalue){
//     const {current} = useRef({fn,timer:null});

//     useEffect(function(){
//         current.fn = fn
//     },[fn])

//     return useCallback((...args)=>{
//         setInputvalue(args[0].terget.value);
//         if(current.timer){
//             clearTimeout(current.timer)
//         }
        
//         current.timer = setTimeout(()=>{
//             current.fn(...args);

//         },delay)

//     });
// }
// import React,{useRef,useCallback,useEffect} from 'react'

// function useDebounce(fn,delay,setInputvalue){
//     const {current} = useRef({fn,timer:null});

//     useEffect(function(){
//         current.fn = fn;
//     },[fn])

//     return useCallback((...args)=>{

//         setInputvalue(args[0].target.value);

//         if(current.timer){
//             clearTimeout(current.timer)
//         }

//         // current.timer =setTimeout(()=>{
//         //     current.fn(...args);
//         // },delay)

//         current.timer = setTimeout(()=>{
//             current.timer(...args);
//         },delay)

//     })
// }


// import React,{useRef,useEffect,useCallback} from 'react'
// const {current} = useRef({fn,timer:null})
// useEffect(function(){
//     current.fn = fn
// },[fn])
// function useDebounce(fn,delay,setInputvalue){

//     return useCallback((...ages)=>{
//         setInputvalue(args[0].target.value);

//         if(current.timer){
//             clearTimeout(current.timer)
//         }

//         current.timer = setTimeout(()=>{
//             current.timer(...args);
//         },delay)
//     })
// }



import React,{useRef,useCallback,useEffect} from 'react';

const {current} = useRef({fn,timer:null})

export default function debounce() {
    return (
        <div>
            
        </div>
    )
}

















